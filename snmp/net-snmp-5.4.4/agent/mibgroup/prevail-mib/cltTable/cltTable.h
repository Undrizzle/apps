/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 17337 $ of $
 *
 * $Id:$
 */
#ifndef CLTTABLE_H
#define CLTTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(prevail-mib)
config_require(prevail-mib/cltTable/cltTable_interface)
config_require(prevail-mib/cltTable/cltTable_data_access)
config_require(prevail-mib/cltTable/cltTable_data_get)
config_require(prevail-mib/cltTable/cltTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for cltTable */
#include "cltTable_oids.h"

/* enum definions */
#include "cltTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_cltTable(void);
void shutdown_cltTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table cltTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * prevail-mib::cltTable is subid 9 of modEoCMib.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.36186.8.9, length: 9
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review cltTable registration context.
     */
typedef netsnmp_data_list cltTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review cltTable data context structure.
 * This structure is used to represent the data for cltTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * cltTable.
 */
typedef struct cltTable_data_s {
    
        /*
         * cltIndex(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   cltIndex;
    
        /*
         * cltModel(3)/DevModelValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cltModel;
    
        /*
         * cltMacAddress(4)/MacAddress/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   cltMacAddress[6];
size_t      cltMacAddress_len; /* # of char elements, not bytes */
    
        /*
         * cltOnlineStatus(5)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cltOnlineStatus;
    
        /*
         * cltMaxStats(6)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   cltMaxStats;
    
        /*
         * cltNumStats(7)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   cltNumStats;
    
        /*
         * cltSoftwareVersion(8)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   cltSoftwareVersion[128];
size_t      cltSoftwareVersion_len; /* # of char elements, not bytes */
    
        /*
         * cltSynchronized(9)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cltSynchronized;
    
        /*
         * cltAction(10)/CltNodeActValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltAction;
    
        /*
         * cltRowStatus(11)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cltRowStatus;
    
} cltTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review cltTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef cltTable_data cltTable_undo_data;

/*
 * TODO:120:r: |-> Review cltTable mib index.
 * This structure is used to represent the index for cltTable.
 */
typedef struct cltTable_mib_index_s {

        /*
         * cltTid(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   cltTid;


} cltTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review cltTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_cltTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review cltTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * cltTable_rowreq_ctx pointer.
 */
typedef struct cltTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_cltTable_IDX_LEN];
    
    cltTable_mib_index        tbl_idx;
    
    cltTable_data              data;
    cltTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to cltTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *cltTable_data_list;

} cltTable_rowreq_ctx;

typedef struct cltTable_ref_rowreq_ctx_s {
    cltTable_rowreq_ctx *rowreq_ctx;
} cltTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int cltTable_pre_request(cltTable_registration * user_context);
    int cltTable_post_request(cltTable_registration * user_context,
        int rc);

    int cltTable_rowreq_ctx_init(cltTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void cltTable_rowreq_ctx_cleanup(cltTable_rowreq_ctx *rowreq_ctx);

    int cltTable_check_dependencies(cltTable_rowreq_ctx * rowreq_ctx); 
    int cltTable_commit(cltTable_rowreq_ctx * rowreq_ctx);

    cltTable_rowreq_ctx *
                  cltTable_row_find_by_mib_index(cltTable_mib_index *mib_idx);

extern const oid cltTable_oid[];
extern const int cltTable_oid_size;


#include "cltTable_interface.h"
#include "cltTable_data_access.h"
#include "cltTable_data_get.h"
#include "cltTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* CLTTABLE_H */
/** @} */
