/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 17337 $ of $
 *
 * $Id:$
 */
#ifndef CNUTABLE_H
#define CNUTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(prevail-mib)
config_require(prevail-mib/cnuTable/cnuTable_interface)
config_require(prevail-mib/cnuTable/cnuTable_data_access)
config_require(prevail-mib/cnuTable/cnuTable_data_get)
config_require(prevail-mib/cnuTable/cnuTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for cnuTable */
#include "cnuTable_oids.h"

/* enum definions */
#include "cnuTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_cnuTable(void);
void shutdown_cnuTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table cnuTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * prevail-mib::cnuTable is subid 1 of modEoCMib.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.36186.8.1, length: 9
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review cnuTable registration context.
     */
typedef netsnmp_data_list cnuTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review cnuTable data context structure.
 * This structure is used to represent the data for cnuTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * cnuTable.
 */
typedef struct cnuTable_data_s {
    
        /*
         * cnuIndex(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   cnuIndex;
    
        /*
         * cnuModel(3)/DevModelValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cnuModel;
    
        /*
         * cnuMacAddress(4)/MacAddress/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   cnuMacAddress[6];
size_t      cnuMacAddress_len; /* # of char elements, not bytes */
    
        /*
         * cnuOnlineStatus(5)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cnuOnlineStatus;
    
        /*
         * cnuAuthorized(6)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cnuAuthorized;
    
        /*
         * cnuSoftwareVersion(7)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   cnuSoftwareVersion[128];
size_t      cnuSoftwareVersion_len; /* # of char elements, not bytes */
    
        /*
         * cnuRxRate(8)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   cnuRxRate;
    
        /*
         * cnuTxRate(9)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   cnuTxRate;
    
        /*
         * cnuSnr(10)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   cnuSnr[16];
size_t      cnuSnr_len; /* # of char elements, not bytes */
    
        /*
         * cnuBpc(11)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   cnuBpc[16];
size_t      cnuBpc_len; /* # of char elements, not bytes */
    
        /*
         * cnuAttenuation(12)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   cnuAttenuation[16];
size_t      cnuAttenuation_len; /* # of char elements, not bytes */
    
        /*
         * cnuAction(13)/CnuRstActValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cnuAction;
    
        /*
         * cnuSynchronized(14)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cnuSynchronized;
    
        /*
         * cnuRowStatus(15)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cnuRowStatus;
    
} cnuTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review cnuTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef cnuTable_data cnuTable_undo_data;

/*
 * TODO:120:r: |-> Review cnuTable mib index.
 * This structure is used to represent the index for cnuTable.
 */
typedef struct cnuTable_mib_index_s {

        /*
         * cnuTid(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   cnuTid;


} cnuTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review cnuTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_cnuTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review cnuTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * cnuTable_rowreq_ctx pointer.
 */
typedef struct cnuTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_cnuTable_IDX_LEN];
    
    cnuTable_mib_index        tbl_idx;
    
    cnuTable_data              data;
    cnuTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to cnuTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *cnuTable_data_list;

} cnuTable_rowreq_ctx;

typedef struct cnuTable_ref_rowreq_ctx_s {
    cnuTable_rowreq_ctx *rowreq_ctx;
} cnuTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int cnuTable_pre_request(cnuTable_registration * user_context);
    int cnuTable_post_request(cnuTable_registration * user_context,
        int rc);

    int cnuTable_rowreq_ctx_init(cnuTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void cnuTable_rowreq_ctx_cleanup(cnuTable_rowreq_ctx *rowreq_ctx);

    int cnuTable_check_dependencies(cnuTable_rowreq_ctx * rowreq_ctx); 
    int cnuTable_commit(cnuTable_rowreq_ctx * rowreq_ctx);

    cnuTable_rowreq_ctx *
                  cnuTable_row_find_by_mib_index(cnuTable_mib_index *mib_idx);

extern const oid cnuTable_oid[];
extern const int cnuTable_oid_size;


#include "cnuTable_interface.h"
#include "cnuTable_data_access.h"
#include "cnuTable_data_get.h"
#include "cnuTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* CNUTABLE_H */
/** @} */
