/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 17337 $ of $
 *
 * $Id:$
 */
#ifndef CLTPROTABLE_H
#define CLTPROTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(prevail-mib)
config_require(prevail-mib/cltproTable/cltproTable_interface)
config_require(prevail-mib/cltproTable/cltproTable_data_access)
config_require(prevail-mib/cltproTable/cltproTable_data_get)
config_require(prevail-mib/cltproTable/cltproTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for cltproTable */
#include "cltproTable_oids.h"

/* enum definions */
#include "cltproTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_cltproTable(void);
void shutdown_cltproTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table cltproTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * prevail-mib::cltproTable is subid 10 of modEoCMib.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.36186.8.10, length: 9
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review cltproTable registration context.
     */
typedef netsnmp_data_list cltproTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review cltproTable data context structure.
 * This structure is used to represent the data for cltproTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * cltproTable.
 */
typedef struct cltproTable_data_s {
    
        /*
         * cltproIndex(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   cltproIndex;
    
        /*
         * cltproBase(3)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   cltproBase;
    
        /*
         * cltproMacLimit(4)/HostsLimitingValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproMacLimit;
    
        /*
         * cltproCuRate(5)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   cltproCuRate;
    
        /*
         * cltproCdRate(6)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   cltproCdRate;
    
        /*
         * cltproLoagTime(7)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   cltproLoagTime;
    
        /*
         * cltproReagTime(8)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   cltproReagTime;
    
        /*
         * cltproIgmpPri(9)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproIgmpPri;
    
        /*
         * cltproUnicastPri(10)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproUnicastPri;
    
        /*
         * cltproAvsPri(11)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproAvsPri;
    
        /*
         * cltproMcastPri(12)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproMcastPri;
    
        /*
         * cltproTbaPriSts(13)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproTbaPriSts;
    
        /*
         * cltproCosPriSts(14)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproCosPriSts;
    
        /*
         * cltproCos0pri(15)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproCos0pri;
    
        /*
         * cltproCos1pri(16)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproCos1pri;
    
        /*
         * cltproCos2pri(17)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproCos2pri;
    
        /*
         * cltproCos3pri(18)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproCos3pri;
    
        /*
         * cltproCos4pri(19)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproCos4pri;
    
        /*
         * cltproCos5pri(20)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproCos5pri;
    
        /*
         * cltproCos6pri(21)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproCos6pri;
    
        /*
         * cltproCos7pri(22)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproCos7pri;
    
        /*
         * cltproTosPriSts(23)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproTosPriSts;
    
        /*
         * cltproTos0pri(24)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproTos0pri;
    
        /*
         * cltproTos1pri(25)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproTos1pri;
    
        /*
         * cltproTos2pri(26)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproTos2pri;
    
        /*
         * cltproTos3pri(27)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproTos3pri;
    
        /*
         * cltproTos4pri(28)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproTos4pri;
    
        /*
         * cltproTos5pri(29)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproTos5pri;
    
        /*
         * cltproTos6pri(30)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproTos6pri;
    
        /*
         * cltproTos7pri(31)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproTos7pri;
    
        /*
         * cltproCommit(32)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   cltproCommit;
    
        /*
         * cltproRowStatus(33)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   cltproRowStatus;
    
} cltproTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review cltproTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef cltproTable_data cltproTable_undo_data;

/*
 * TODO:120:r: |-> Review cltproTable mib index.
 * This structure is used to represent the index for cltproTable.
 */
typedef struct cltproTable_mib_index_s {

        /*
         * cltproTid(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   cltproTid;


} cltproTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review cltproTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_cltproTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review cltproTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * cltproTable_rowreq_ctx pointer.
 */
typedef struct cltproTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_cltproTable_IDX_LEN];
    
    cltproTable_mib_index        tbl_idx;
    
    cltproTable_data              data;
    cltproTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to cltproTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *cltproTable_data_list;

} cltproTable_rowreq_ctx;

typedef struct cltproTable_ref_rowreq_ctx_s {
    cltproTable_rowreq_ctx *rowreq_ctx;
} cltproTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int cltproTable_pre_request(cltproTable_registration * user_context);
    int cltproTable_post_request(cltproTable_registration * user_context,
        int rc);

    int cltproTable_rowreq_ctx_init(cltproTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void cltproTable_rowreq_ctx_cleanup(cltproTable_rowreq_ctx *rowreq_ctx);

    int cltproTable_check_dependencies(cltproTable_rowreq_ctx * rowreq_ctx); 
    int cltproTable_commit(cltproTable_rowreq_ctx * rowreq_ctx);

    cltproTable_rowreq_ctx *
                  cltproTable_row_find_by_mib_index(cltproTable_mib_index *mib_idx);

extern const oid cltproTable_oid[];
extern const int cltproTable_oid_size;


#include "cltproTable_interface.h"
#include "cltproTable_data_access.h"
#include "cltproTable_data_get.h"
#include "cltproTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* CLTPROTABLE_H */
/** @} */
