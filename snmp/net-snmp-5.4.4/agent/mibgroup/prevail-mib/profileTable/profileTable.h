/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 17337 $ of $
 *
 * $Id:$
 */
#ifndef PROFILETABLE_H
#define PROFILETABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(prevail-mib)
config_require(prevail-mib/profileTable/profileTable_interface)
config_require(prevail-mib/profileTable/profileTable_data_access)
config_require(prevail-mib/profileTable/profileTable_data_get)
config_require(prevail-mib/profileTable/profileTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for profileTable */
#include "profileTable_oids.h"

/* enum definions */
#include "profileTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_profileTable(void);
void shutdown_profileTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table profileTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * prevail-mib::profileTable is subid 8 of modEoCMib.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.36186.8.8, length: 9
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review profileTable registration context.
     */
typedef netsnmp_data_list profileTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review profileTable data context structure.
 * This structure is used to represent the data for profileTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * profileTable.
 */
typedef struct profileTable_data_s {
    
        /*
         * proIndex(2)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   proIndex;
    
        /*
         * proBase(3)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   proBase;
    
        /*
         * proMacLimit(4)/HostsLimitingValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proMacLimit;
    
        /*
         * proCableUplinkRate(5)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proCableUplinkRate;
    
        /*
         * proCableDownlinkRate(6)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proCableDownlinkRate;
    
        /*
         * proLocalAgingTime(7)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proLocalAgingTime;
    
        /*
         * proRemoteAgingTime(8)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proRemoteAgingTime;
    
        /*
         * proIgmpPri(9)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proIgmpPri;
    
        /*
         * proUnicastPri(10)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proUnicastPri;
    
        /*
         * proAvsPri(11)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proAvsPri;
    
        /*
         * proMcastPri(12)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proMcastPri;
    
        /*
         * proTbaPriSts(13)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTbaPriSts;
    
        /*
         * proCosPriSts(14)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proCosPriSts;
    
        /*
         * proCos0pri(15)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proCos0pri;
    
        /*
         * proCos1pri(16)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proCos1pri;
    
        /*
         * proCos2pri(17)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proCos2pri;
    
        /*
         * proCos3pri(18)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proCos3pri;
    
        /*
         * proCos4pri(19)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proCos4pri;
    
        /*
         * proCos5pri(20)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proCos5pri;
    
        /*
         * proCos6pri(21)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proCos6pri;
    
        /*
         * proCos7pri(22)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proCos7pri;
    
        /*
         * proTosPriSts(23)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTosPriSts;
    
        /*
         * proTos0pri(24)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTos0pri;
    
        /*
         * proTos1pri(25)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTos1pri;
    
        /*
         * proTos2pri(26)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTos2pri;
    
        /*
         * proTos3pri(27)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTos3pri;
    
        /*
         * proTos4pri(28)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTos4pri;
    
        /*
         * proTos5pri(29)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTos5pri;
    
        /*
         * proTos6pri(30)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTos6pri;
    
        /*
         * proTos7pri(31)/PriQueueValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTos7pri;
    
        /*
         * proSfbSts(32)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proSfbSts;
    
        /*
         * proSfuSts(33)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proSfuSts;
    
        /*
         * proSfmSts(34)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proSfmSts;
    
        /*
         * proSfRate(35)/StromFilterValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proSfRate;
    
        /*
         * proVlanStatus(36)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proVlanStatus;
    
        /*
         * proEth1vid(37)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   proEth1vid;
    
        /*
         * proEth2vid(38)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   proEth2vid;
    
        /*
         * proEth3vid(39)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   proEth3vid;
    
        /*
         * proEth4vid(40)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/R/d/h
         */
   long   proEth4vid;
    
        /*
         * proPortPriSts(41)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proPortPriSts;
    
        /*
         * proEth1pri(42)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth1pri;
    
        /*
         * proEth2pri(43)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth2pri;
    
        /*
         * proEth3pri(44)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth3pri;
    
        /*
         * proEth4pri(45)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth4pri;
    
        /*
         * proRxLimitSts(46)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proRxLimitSts;
    
        /*
         * proCpuPortRxRate(47)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proCpuPortRxRate;
    
        /*
         * proEth1rx(48)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth1rx;
    
        /*
         * proEth2rx(49)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth2rx;
    
        /*
         * proEth3rx(50)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth3rx;
    
        /*
         * proEth4rx(51)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth4rx;
    
        /*
         * proTxLimitSts(52)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proTxLimitSts;
    
        /*
         * proCpuPortTxRate(53)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proCpuPortTxRate;
    
        /*
         * proEth1tx(54)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth1tx;
    
        /*
         * proEth2tx(55)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth2tx;
    
        /*
         * proEth3tx(56)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth3tx;
    
        /*
         * proEth4tx(57)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   proEth4tx;
    
        /*
         * proPsctlSts(58)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proPsctlSts;
    
        /*
         * proCpuPortSts(59)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   proCpuPortSts;
    
        /*
         * proEth1sts(60)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proEth1sts;
    
        /*
         * proEth2sts(61)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proEth2sts;
    
        /*
         * proEth3sts(62)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proEth3sts;
    
        /*
         * proEth4sts(63)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proEth4sts;
    
        /*
         * proCommit(64)/TruthValue/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   proCommit;
    
        /*
         * proRowStatus(65)/TruthValue/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   proRowStatus;
    
} profileTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review profileTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef profileTable_data profileTable_undo_data;

/*
 * TODO:120:r: |-> Review profileTable mib index.
 * This structure is used to represent the index for profileTable.
 */
typedef struct profileTable_mib_index_s {

        /*
         * proTid(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   proTid;


} profileTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review profileTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_profileTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review profileTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * profileTable_rowreq_ctx pointer.
 */
typedef struct profileTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_profileTable_IDX_LEN];
    
    profileTable_mib_index        tbl_idx;
    
    profileTable_data              data;
    profileTable_undo_data       * undo;
    //unsigned int                column_set_flags; /* flags for set columns */
    /* Modified by frank */
    uint64_t                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to profileTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *profileTable_data_list;

} profileTable_rowreq_ctx;

typedef struct profileTable_ref_rowreq_ctx_s {
    profileTable_rowreq_ctx *rowreq_ctx;
} profileTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int profileTable_pre_request(profileTable_registration * user_context);
    int profileTable_post_request(profileTable_registration * user_context,
        int rc);

    int profileTable_rowreq_ctx_init(profileTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void profileTable_rowreq_ctx_cleanup(profileTable_rowreq_ctx *rowreq_ctx);

    int profileTable_check_dependencies(profileTable_rowreq_ctx * rowreq_ctx); 
    int profileTable_commit(profileTable_rowreq_ctx * rowreq_ctx);

    profileTable_rowreq_ctx *
                  profileTable_row_find_by_mib_index(profileTable_mib_index *mib_idx);

extern const oid profileTable_oid[];
extern const int profileTable_oid_size;


#include "profileTable_interface.h"
#include "profileTable_data_access.h"
#include "profileTable_data_get.h"
#include "profileTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* PROFILETABLE_H */
/** @} */
