1. 拷贝MIB文件至："/usr/local/share/snmp/mibs"
		cp /home/frank/opt/work/EoC/project/temp/mib2c/prevail-mib.txt /usr/local/share/snmp/mibs/
		
2. 创建临时目录用来存储mib2c需要的配置文件以及生成的文件：
		cp /usr/local/share/snmp/*.conf /home/frank/opt/work/EoC/project/temp/
		
3. 生成代码：
		env MIBS="+prevail-mib" mib2c -c mib2c.mfd.conf -I /usr/local/share/snmp/mib2c-data/ profileTable
		
Defaults for cnuTable...
writing to -
There are no defaults for cnuTable. Would you like to

  1) Accept hard-coded defaults
  2) Set defaults now [DEFAULT]

Select your choice : 2


This table has writable columns. Do you want to generate
code for writeable columns, or restrict the table to read-only?

  1) generate code with writeable columns [DEFAULT]
  2) generate code with read-only columns

Select your choice : 1


Since your table is writable, do you want to generate code to save and
restore rows in the Net-SNMP persistent store? You should only use this
option if the agent 'owns' the data, and doesn't get the data from an
external source.

  1) do not generate persistent store code [DEFAULT]
  2) generate persistent store code

Select your choice : 1


Writable tables sometimes have dependencies beteen columns
or with other tables. If there are no dependencies in this table, you
probably do not want the extra code.

  1) do not generate dependency code [DEFAULT]
  2) generate dependency code

Select your choice : 2


Do you want to use an existing data structure for the USER context?
This would be a structure used to track data for the entire table,
(similar to a global variable) not individual rows.

  1) No, use netsnmp_data_list [DEFAULT]
  2) Yes, use my own structure

Select your choice : 1


Do you want to use an existing data structure for the DATA context?
The DATA context holds the data for each MIB column. By default, a new
data structure will be created with an element for each column.

  1) No, use generated [DEFAULT]
  2) Yes, use my own structure

Select your choice : 1


Do you need to initialize elements in the 'generated' DATA
context when a new instance is created (eg default values, or other structures
you are going to add that might need initialization to the row request context?
(The most common reasons you might need to do this is are if you want to keep
some non-MIB data for every row, or some columns have default values.)

  1) no, no initialization needed
  2) yes, initilization is needed [DEFAULT]

Select your choice : 2


Do you plan on keeping all data in the format defined by the MIB? If so,
no functions will be generated to map values. If some data will be
stored in a different format, the mapping functions will be generated.
If your MIB has integers with enumerations, mapping functions are more
likely to be needed. (e.g. A TruthValue object will hold the value
1 or 2, but a C boolean would be 1 or 0.)

  1) All values will be stored as defined by the MIB [DEFAULT]
  2) I need to map values to the format defined by the MIB.

Select your choice : 1


Which method would you like to use to gather data about available rows?

  1) container : [DEFAULT]  This access method uses a netsnmp_container
     to store all row data in memory. This method is best for:
         - Internal data (maintained by the agent)
         - Access speed is important
         - Sufficient memory exists to contain all rows

  2) container-cached : This access method uses a netsnmp_container
     to keep track of the indexes (and data, usually) for each
     row. This method is best for:
         - External data (maintained by another process/the kernel)
         - Access speed is important
         - Sufficient memory exists to contain all indexes

  3) unsorted-external : This access method iterates over all of your data
     to find the row with the appropriate index. This method is good for
         - External data (maintained by another process/the kernel)
         - Using less memory is much more important than access speed

Select your choice : 2


When accessing your data, is your data TRANSIENT?

  1) Yes. My data is TRANSIENT (e.g. a pointer to a static buffer that
     my be overwritten during a request) and needs to be copied during
     processing.

  2) Yes. My data is SEMI-TRANSIENT (e.g. an allocated pointer to a
     copy of the data).

  3) No, my data is PERSISTENT (e.g. an allocated pointer to the actual
     data, which is under the agent's control)

Select your choice [DEFAULT=1] : 1


Do you want example code to be generated? This will generate example code
for reading data from a text file.

  1) generate example code [DEFAULT]
  2) do not generate example code

Select your choice : 1

Is your table sparse? A sparse table is a table where some
columns might not exist for all rows. Note that if your table
contains a RowStaus column and it supports createAndWait, you
will need sparse table support.

  1) No, all columns always exist for every row [DEFAULT]
  2) Yes, my table is sparse

Select your choice : 1

Do you want a makefile and AgentX subagent source file generated?
This will let you test your table without having to link it into
snmpd. (You can still link it in later.)

  1) do not generate makefile/AgentX code [DEFAULT]
  2) generate makefile/AgentX code

Select your choice : 1

writing to defaults/table-profileTable.m2d
Starting MFD code generation...
writing to profileTable.h
| +-> Processing table profileTable
writing to defaults/node-profileIndex.m2d
writing to defaults/node-base.m2d
writing to defaults/node-macLimit.m2d
writing to defaults/node-cableUplinkRate.m2d
writing to defaults/node-cableDownlinkRate.m2d
writing to defaults/node-localAgingTime.m2d
writing to defaults/node-remoteAgingTime.m2d
writing to defaults/node-igmpPri.m2d
writing to defaults/node-unicastPri.m2d
writing to defaults/node-avsPri.m2d
writing to defaults/node-mcastPri.m2d
writing to defaults/node-tbaPriSts.m2d
writing to defaults/node-cosPriSts.m2d
writing to defaults/node-cos0pri.m2d
writing to defaults/node-cos1pri.m2d
writing to defaults/node-cos2pri.m2d
writing to defaults/node-cos3pri.m2d
writing to defaults/node-cos4pri.m2d
writing to defaults/node-cos5pri.m2d
writing to defaults/node-cos6pri.m2d
writing to defaults/node-cos7pri.m2d
writing to defaults/node-tosPriSts.m2d
writing to defaults/node-tos0pri.m2d
writing to defaults/node-tos1pri.m2d
writing to defaults/node-tos2pri.m2d
writing to defaults/node-tos3pri.m2d
writing to defaults/node-tos4pri.m2d
writing to defaults/node-tos5pri.m2d
writing to defaults/node-tos6pri.m2d
writing to defaults/node-tos7pri.m2d
writing to defaults/node-sfbSts.m2d
writing to defaults/node-sfuSts.m2d
writing to defaults/node-sfmSts.m2d
writing to defaults/node-sfRate.m2d
writing to defaults/node-vlanStatus.m2d
writing to defaults/node-eth1vid.m2d
writing to defaults/node-eth2vid.m2d
writing to defaults/node-eth3vid.m2d
writing to defaults/node-eth4vid.m2d
writing to defaults/node-portPriSts.m2d
writing to defaults/node-eth1pri.m2d
writing to defaults/node-eth2pri.m2d
writing to defaults/node-eth3pri.m2d
writing to defaults/node-eth4pri.m2d
writing to defaults/node-rxLimitSts.m2d
writing to defaults/node-cpuPortRxRate.m2d
writing to defaults/node-eth1rx.m2d
writing to defaults/node-eth2rx.m2d
writing to defaults/node-eth3rx.m2d
writing to defaults/node-eth4rx.m2d
writing to defaults/node-txLimitSts.m2d
writing to defaults/node-cpuPortTxRate.m2d
writing to defaults/node-eth1tx.m2d
writing to defaults/node-eth2tx.m2d
writing to defaults/node-eth3tx.m2d
writing to defaults/node-eth4tx.m2d
writing to defaults/node-psctlSts.m2d
writing to defaults/node-cpuPortSts.m2d
writing to defaults/node-eth1sts.m2d
writing to defaults/node-eth2sts.m2d
writing to defaults/node-eth3sts.m2d
writing to defaults/node-eth4sts.m2d
writing to defaults/node-rowCommit.m2d
writing to defaults/node-rowStatus.m2d
writing to defaults/node-tblid.m2d
writing to profileTable.c
writing to profileTable_data_get.h
writing to profileTable_data_get.c
| |   +-> Processing nonindex profileIndex
| |   +-> Processing nonindex base
| |   +-> Processing nonindex macLimit
| |   +-> Processing nonindex cableUplinkRate
| |   +-> Processing nonindex cableDownlinkRate
| |   +-> Processing nonindex localAgingTime
| |   +-> Processing nonindex remoteAgingTime
| |   +-> Processing nonindex igmpPri
| |   +-> Processing nonindex unicastPri
| |   +-> Processing nonindex avsPri
| |   +-> Processing nonindex mcastPri
| |   +-> Processing nonindex tbaPriSts
| |   +-> Processing nonindex cosPriSts
| |   +-> Processing nonindex cos0pri
| |   +-> Processing nonindex cos1pri
| |   +-> Processing nonindex cos2pri
| |   +-> Processing nonindex cos3pri
| |   +-> Processing nonindex cos4pri
| |   +-> Processing nonindex cos5pri
| |   +-> Processing nonindex cos6pri
| |   +-> Processing nonindex cos7pri
| |   +-> Processing nonindex tosPriSts
| |   +-> Processing nonindex tos0pri
| |   +-> Processing nonindex tos1pri
| |   +-> Processing nonindex tos2pri
| |   +-> Processing nonindex tos3pri
| |   +-> Processing nonindex tos4pri
| |   +-> Processing nonindex tos5pri
| |   +-> Processing nonindex tos6pri
| |   +-> Processing nonindex tos7pri
| |   +-> Processing nonindex sfbSts
| |   +-> Processing nonindex sfuSts
| |   +-> Processing nonindex sfmSts
| |   +-> Processing nonindex sfRate
| |   +-> Processing nonindex vlanStatus
| |   +-> Processing nonindex eth1vid
| |   +-> Processing nonindex eth2vid
| |   +-> Processing nonindex eth3vid
| |   +-> Processing nonindex eth4vid
| |   +-> Processing nonindex portPriSts
| |   +-> Processing nonindex eth1pri
| |   +-> Processing nonindex eth2pri
| |   +-> Processing nonindex eth3pri
| |   +-> Processing nonindex eth4pri
| |   +-> Processing nonindex rxLimitSts
| |   +-> Processing nonindex cpuPortRxRate
| |   +-> Processing nonindex eth1rx
| |   +-> Processing nonindex eth2rx
| |   +-> Processing nonindex eth3rx
| |   +-> Processing nonindex eth4rx
| |   +-> Processing nonindex txLimitSts
| |   +-> Processing nonindex cpuPortTxRate
| |   +-> Processing nonindex eth1tx
| |   +-> Processing nonindex eth2tx
| |   +-> Processing nonindex eth3tx
| |   +-> Processing nonindex eth4tx
| |   +-> Processing nonindex psctlSts
| |   +-> Processing nonindex cpuPortSts
| |   +-> Processing nonindex eth1sts
| |   +-> Processing nonindex eth2sts
| |   +-> Processing nonindex eth3sts
| |   +-> Processing nonindex eth4sts
| |   +-> Processing nonindex rowCommit
| |   +-> Processing nonindex rowStatus
writing to profileTable_data_set.h
writing to profileTable_data_set.c
Use of uninitialized value $key in hash element at /usr/local/lib/perl/5.10.1/SNMP.pm line 1325, <GEN1144> line 1750.
Use of uninitialized value $key in hash element at /usr/local/lib/perl/5.10.1/SNMP.pm line 1326, <GEN1144> line 1750.
Use of uninitialized value in null operation at /usr/local/lib/perl/5.10.1/SNMP.pm line 1325, <GEN1144> line 1750.
| |   +-> Processing nonindex base
| |   +-> Processing nonindex macLimit
| |   +-> Processing nonindex cableUplinkRate
| |   +-> Processing nonindex cableDownlinkRate
| |   +-> Processing nonindex localAgingTime
| |   +-> Processing nonindex remoteAgingTime
| |   +-> Processing nonindex igmpPri
| |   +-> Processing nonindex unicastPri
| |   +-> Processing nonindex avsPri
| |   +-> Processing nonindex mcastPri
| |   +-> Processing nonindex tbaPriSts
| |   +-> Processing nonindex cosPriSts
| |   +-> Processing nonindex cos0pri
| |   +-> Processing nonindex cos1pri
| |   +-> Processing nonindex cos2pri
| |   +-> Processing nonindex cos3pri
| |   +-> Processing nonindex cos4pri
| |   +-> Processing nonindex cos5pri
| |   +-> Processing nonindex cos6pri
| |   +-> Processing nonindex cos7pri
| |   +-> Processing nonindex tosPriSts
| |   +-> Processing nonindex tos0pri
| |   +-> Processing nonindex tos1pri
| |   +-> Processing nonindex tos2pri
| |   +-> Processing nonindex tos3pri
| |   +-> Processing nonindex tos4pri
| |   +-> Processing nonindex tos5pri
| |   +-> Processing nonindex tos6pri
| |   +-> Processing nonindex tos7pri
| |   +-> Processing nonindex sfbSts
| |   +-> Processing nonindex sfuSts
| |   +-> Processing nonindex sfmSts
| |   +-> Processing nonindex sfRate
| |   +-> Processing nonindex vlanStatus
| |   +-> Processing nonindex eth1vid
| |   +-> Processing nonindex eth2vid
| |   +-> Processing nonindex eth3vid
| |   +-> Processing nonindex eth4vid
| |   +-> Processing nonindex portPriSts
| |   +-> Processing nonindex eth1pri
| |   +-> Processing nonindex eth2pri
| |   +-> Processing nonindex eth3pri
| |   +-> Processing nonindex eth4pri
| |   +-> Processing nonindex rxLimitSts
| |   +-> Processing nonindex cpuPortRxRate
| |   +-> Processing nonindex eth1rx
| |   +-> Processing nonindex eth2rx
| |   +-> Processing nonindex eth3rx
| |   +-> Processing nonindex eth4rx
| |   +-> Processing nonindex txLimitSts
| |   +-> Processing nonindex cpuPortTxRate
| |   +-> Processing nonindex eth1tx
| |   +-> Processing nonindex eth2tx
| |   +-> Processing nonindex eth3tx
| |   +-> Processing nonindex eth4tx
| |   +-> Processing nonindex psctlSts
| |   +-> Processing nonindex eth1sts
| |   +-> Processing nonindex eth2sts
| |   +-> Processing nonindex eth3sts
| |   +-> Processing nonindex eth4sts
| |   +-> Processing nonindex rowCommit
writing to profileTable_oids.h
writing to profileTable_enums.h
writing to profileTable_interface.h
writing to profileTable_interface.c
writing to profileTable_data_access.h
writing to profileTable_data_access.c
writing to profileTable-README-FIRST.txt
writing to profileTable-README-profileTable.txt
running indent on profileTable_interface.c
running indent on profileTable_data_get.c
running indent on profileTable.c
running indent on profileTable_oids.h
running indent on profileTable_data_access.c
running indent on profileTable_data_set.h
running indent on profileTable_data_access.h
running indent on profileTable_data_get.h
running indent on profileTable_interface.h
running indent on profileTable_enums.h
running indent on profileTable_data_set.c
running indent on profileTable.h
frank@eoc-server:~/opt/work/EoC/project/temp/mib2c$
