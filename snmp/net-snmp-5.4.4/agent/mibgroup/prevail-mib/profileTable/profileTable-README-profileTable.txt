************************************************************************
profileTable README
------------------------------------------------------------------------
  This readme file describes the code generated by mib2c (using the MIBs
  for Dummies (MFD) configuration file). The code generated was
  generated specifically for the following SNMP table:

     profileTable

  Your code will be called when the snmp agent receives requests for
  the profileTable table.  The agent will start by looking for the right
  row in your existing data to operate on, if one exists.


  Configuration Variables
  ------------------------------------------------------------
  Some variables used for code generation may be set to affect the code
  generation. You may override these variables by setting them in the
  file defaults/table-profileTable.m2d, and then re-running mib2c.

    m2c_table_settable (currently '1')
    --------------------------------------------------------
    This variable determines whether or not code is generated to support
    MIB object which have an access of read-write or read-create. The
    default is set based on whether or not the table contains writable
    objects, but can be over-ridden.

    Syntax: @eval $m2c_table_settable = 0@


    m2c_table_dependencies (currently '1')
    --------------------------------------------------------
    This variable determines whether or not code is generated to support
    checking dependencies between columns, rows or tables. The default
    is set based on whether or not the table contains writable objects,
    but can be over-ridden.

    Syntax: @eval $m2c_table_dependencies = 0@


    m2c_table_row_creation (currently '0')
    --------------------------------------------------------
    This variable determines whether or not code is generated to support
    checking creation of new rows via SNMP. The default is set based on
    whether or not the table contains read-create objects, but can be
    over-ridden.

    Syntax: @eval $m2c_table_row_creation = 0@


    m2c_context_reg (currently 'netsnmp_data_list')
    --------------------------------------------------------
    This variable contains the structure name to typedef for the
    profileTable_registration.

    During initilization, you will provide a pointer to a structure of
    this type. This pointer is used as a parameter to many functions so
    that you have access to your registration data. The default is a
    netsnmp_data_list pointer, which will allow you to keep multiple
    pointers tagged by a text name. If you have a new or existing structure
    you would rather use, you can redefine this variable.
    

    To avoid regenerating code, you may also change this typedef directly
    in the profileTable.h header.

    Syntax: @eval $m2c_context_reg = "struct my_registration_context@


    m2c_data_context (currently 'generated')
    --------------------------------------------------------
    This variable contains the structure name to typedef for the
    profileTable_data.

    This typedef is used in the row request context structure for the table,
    profileTable_rowreq_ctx.

    The typedef in the primary table context will be used for the data and
    undo structure types. This structure should contain all the data
    needed for all the columns in the table. The default is 'generated',
    which will cuase a new data strcuture to be generated with data members
    for each column.

    To avoid regenerating code, you may also change this typedef directly
    in the profileTable.h header.

    Syntax: @eval $m2c_data_context = "struct my_data_context"@


    m2c_data_allocate (currently '0')
    --------------------------------------------------------
    This variable determines whether or not the data context (see above)
    requires memory to be allocated. The default generated data structure
    does not. If you are using a custom data context which needs to
    allocate memory, override this value and two additional functions
    will be generated:

      profileTable_allocate_data
      profileTable_release_data

    Syntax: @eval $m2c_data_allocate = 1@


    m2c_data_init (currently '1')
    --------------------------------------------------------
    This variable determines whether or not the data context (see above)
    or any other items you have added to the table context requires
    initialization. The default generated data structure does not. If you
    are using a custom data context or have added items needing initialization
    to the table context, override this value and two additional functions
    will be generated:

      profileTable_rowreq_ctx_init
      profileTable_rowreq_ctx_cleanup

    Syntax: @eval 1 = 1@


    m2c_table_access (currently 'container-cached')
    ------------------------------------------------------------------
    This variable determines which data interface will be use to generate
    code for looking up data for a given index. The default is the
    'container-cached' access code, which caches the data in a netsnmp-
    container (usually a sorted array).

    Available options can be determined by checking for mib2c configuration
    files that begin with 'mfd-access-*'.

    Syntax: @eval $m2c_table_access = 'container-cached'@

 
    m2c_include_examples (currently '1')
    ------------------------------------------------------------------
    This variable determines whether or not to generate example code. The
    default is to generate example code.

    Syntax: @eval $m2c_include_examples = 0@


    m2c_data_transient (currently '2')
    ------------------------------------------------------------------
    This variable determines how the generated example code deals with the
    data during data lookup. See the table readme file for details on how
    the current table access method interprets this value. In general,
    a value of 0 indicates persistent data, 1 indicates semi-transient and
    2 indicates transient data.

    Syntax: @eval $m2c_data_transient = 0@


 Index(es) for the profileTable table
  ------------------------------------------------------------
  The index(es) for the profileTable table are:

     proTid:
        Syntax:      INTEGER
        DataType:    INTEGER
        ASN type:    ASN_INTEGER
        C-code type: long

  You should know how to set all these values from your data context,
  profileTable_data.


************************************************************************
profileTable File Overview
------------------------------------------------------------------------
  Several files have been generated to implement the profileTable
  table. We'll go through these files, one by one, explaining each and
  letting you know which you need to edit.


File: profileTable_data_access.[c|h]
------------------------------------------------------------------------
  The profileTable_data_access file contains the interface to your data in
  its raw format.  These functions are used to build the row cache or 
  locate the row (depending on the table access method).

  Set MIB context
  -----------------
  TODO : Set MIB index values
  FUNC : profileTable_indexes_set
  WHERE: profileTable_data_access.c

  This is a convenience function for setting the index context from
  the native C data. Where necessary, value mapping should be done.

  This function should update the table index values (found in
  tbl_idx) for the given raw data.

  
  container summary
  ------------------------
    The container data access code is for cases when you want to
    store your data in the agent/sub-agent.

    ... to be continued...


  cache summary
  ------------------------
    The container-cached data access code is for cases when you want to
    cache your data in the agent/sub-agent.

    ... to be continued...




File: profileTable_enums.h
------------------------------------------------------------------------
  This file contains macros for mapping enumeration values when the
  enumerated values defined by the MIB do not match the values used
  internally.

  Review this file to see if any values need to be updated.


File: profileTable_data_get.c
------------------------------------------------------------------------
  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proIndex_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proBase_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proMacLimit_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCableUplinkRate_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCableDownlinkRate_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proLocalAgingTime_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proRemoteAgingTime_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proIgmpPri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proUnicastPri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proAvsPri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proMcastPri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTbaPriSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCosPriSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCos0pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCos1pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCos2pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCos3pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCos4pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCos5pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCos6pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCos7pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTosPriSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTos0pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTos1pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTos2pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTos3pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTos4pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTos5pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTos6pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTos7pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proSfbSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proSfuSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proSfmSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proSfRate_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proVlanStatus_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth1vid_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth2vid_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth3vid_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth4vid_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proPortPriSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth1pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth2pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth3pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth4pri_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proRxLimitSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCpuPortRxRate_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth1rx_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth2rx_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth3rx_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth4rx_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proTxLimitSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCpuPortTxRate_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth1tx_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth2tx_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth3tx_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth4tx_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proPsctlSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCpuPortSts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth1sts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth2sts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth3sts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proEth4sts_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proCommit_get

  Get data for column
  -------------------
  TODO : retrieve column data from raw data
  FUNC : proRowStatus_get



File: profileTable_data_set.c
------------------------------------------------------------------------

  This code was generated based on the following assumptions or settings:

  1) None of the values for this table have DEPENDENCIES on other objects.

  DEPENDENCIES on other objects complicates SET request processing. When
  one or more columns in a table depend on another object (in the same
  table, or in another table), a DEPENDENCY exists. For example, if you
  have a table that determine a color with three columns (red, green and
  blue) that define the percentage of each primary color, the total for
  the three columns must equal 100 percent. So, in addition to checking
  that each colums has a valid value between 0 and 100, the total of
  all three columns must equal 100.

  Set $m2c_table_dependencies = 0 in defaults/table-profileTable.m2d
  and regenerate code if this assumption is incorrect.

  2) This table does not support ROW CREATION.

  Supporting ROW CREATION allows new rows to be created via SNMP requests.


  Check dependencies
  ------------------
  TODO : check that all dependencies have been satisfied
  FUNC : profileTable_check_dependencies

  This function will be called after all the individual columns have been
  set to their new values. Check for any dependencies between rows or
  tables in this function.


  Undo setup
  ----------
  TODO : save data for undo
  FUNC : profileTable_undo_setup

  This function will be called before the individual undo_setup functions are
  called. This is where you should save any undo information which is not
  directly related to a particular column. This function will only be called
  once per row. After this function is called, any column which is being
  set will have its individual node undo_setup function called.



  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proBase_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proBase_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proBase_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proBase_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proMacLimit_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proMacLimit_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proMacLimit_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proMacLimit_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCableUplinkRate_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCableUplinkRate_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCableUplinkRate_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCableUplinkRate_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCableDownlinkRate_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCableDownlinkRate_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCableDownlinkRate_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCableDownlinkRate_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proLocalAgingTime_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proLocalAgingTime_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proLocalAgingTime_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proLocalAgingTime_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proRemoteAgingTime_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proRemoteAgingTime_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proRemoteAgingTime_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proRemoteAgingTime_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proIgmpPri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proIgmpPri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proIgmpPri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proIgmpPri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proUnicastPri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proUnicastPri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proUnicastPri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proUnicastPri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proAvsPri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proAvsPri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proAvsPri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proAvsPri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proMcastPri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proMcastPri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proMcastPri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proMcastPri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTbaPriSts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTbaPriSts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTbaPriSts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTbaPriSts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCosPriSts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCosPriSts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCosPriSts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCosPriSts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCos0pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCos0pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCos0pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCos0pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCos1pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCos1pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCos1pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCos1pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCos2pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCos2pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCos2pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCos2pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCos3pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCos3pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCos3pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCos3pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCos4pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCos4pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCos4pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCos4pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCos5pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCos5pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCos5pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCos5pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCos6pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCos6pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCos6pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCos6pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCos7pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCos7pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCos7pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCos7pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTosPriSts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTosPriSts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTosPriSts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTosPriSts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTos0pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTos0pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTos0pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTos0pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTos1pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTos1pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTos1pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTos1pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTos2pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTos2pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTos2pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTos2pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTos3pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTos3pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTos3pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTos3pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTos4pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTos4pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTos4pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTos4pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTos5pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTos5pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTos5pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTos5pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTos6pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTos6pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTos6pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTos6pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTos7pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTos7pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTos7pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTos7pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proSfbSts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proSfbSts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proSfbSts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proSfbSts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proSfuSts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proSfuSts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proSfuSts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proSfuSts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proSfmSts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proSfmSts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proSfmSts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proSfmSts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proSfRate_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proSfRate_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proSfRate_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proSfRate_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proVlanStatus_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proVlanStatus_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proVlanStatus_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proVlanStatus_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth1vid_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth1vid_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth1vid_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth1vid_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth2vid_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth2vid_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth2vid_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth2vid_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth3vid_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth3vid_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth3vid_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth3vid_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth4vid_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth4vid_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth4vid_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth4vid_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proPortPriSts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proPortPriSts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proPortPriSts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proPortPriSts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth1pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth1pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth1pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth1pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth2pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth2pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth2pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth2pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth3pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth3pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth3pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth3pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth4pri_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth4pri_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth4pri_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth4pri_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proRxLimitSts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proRxLimitSts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proRxLimitSts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proRxLimitSts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCpuPortRxRate_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCpuPortRxRate_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCpuPortRxRate_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCpuPortRxRate_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth1rx_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth1rx_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth1rx_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth1rx_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth2rx_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth2rx_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth2rx_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth2rx_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth3rx_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth3rx_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth3rx_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth3rx_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth4rx_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth4rx_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth4rx_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth4rx_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proTxLimitSts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proTxLimitSts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proTxLimitSts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proTxLimitSts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCpuPortTxRate_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCpuPortTxRate_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCpuPortTxRate_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCpuPortTxRate_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth1tx_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth1tx_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth1tx_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth1tx_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth2tx_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth2tx_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth2tx_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth2tx_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth3tx_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth3tx_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth3tx_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth3tx_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth4tx_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth4tx_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth4tx_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth4tx_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proPsctlSts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proPsctlSts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proPsctlSts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proPsctlSts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth1sts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth1sts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth1sts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth1sts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth2sts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth2sts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth2sts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth2sts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth3sts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth3sts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth3sts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth3sts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proEth4sts_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proEth4sts_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proEth4sts_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proEth4sts_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.

  Check value for column
  ----------------------
  TODO : perform additional validations on values for a set request
  FUNC : proCommit_check_value

  The generated code will automatically validate incoming requests against
  all the requirements specified by the syntax of the MIB. However, it is
  often the case that additional requirements are specified in the
  description of a MIB object. Those type of validations should be checked
  in this function.


  Undo setup for column
  ---------------------
  TODO : save the value for column
  FUNC : proCommit_undo_setup

  After the table level undo setup function has been called, the individual
  node undo setup functions will be called for columns which are being set.


  Set value for column
  --------------------
  TODO : set the value for column
  FUNC : proCommit_set

  After all the validations have been passed, this function will be called to
  set the new value.


  Undo value for column
  ---------------------
  TODO : undo set for column
  FUNC : proCommit_undo

  If an error occurs after a column has been set, this function will be called
  to undo the set and restore the previous state.



  Commit changes
  --------------
  TODO : commit changes
  FUNC : profileTable_commit

  After all values have been set, the commit function will be called.





************************************************************************
profileTable Reference
------------------------------------------------------------------------

Function flow
----------------------------------------------------
To give you the general idea of how the functions flow works, this
example flow is from a complete table implementation.

NOTE: Depending on your configuration, some of the functions used in the
      examples below  may not have been generated for the
      profileTable table.

      Conversely, the examples below may not include some functions that
      were generated for the profileTable table.

To watch the flow of the profileTable table, use the
following debug tokens:

        snmp_agent
        helper:table:req
        profileTable
        verbose:profileTable
        internal:profileTable

e.g.
        snmpd -f -Le -DprofileTable,verbose:profileTable,internal:profileTable


Initialization
--------------------------------
init_xxxTable: called                           xxx.c
   initialize_table_xxxTable                    xxx.c
      _xxxTable_initialize_interface            xxx_interface.c
         xxxTable_init_data                     xxx_data_access.c
      _xxxTable_container_init                  xxx_interface.c
         xxxTable_container_init                xxx_data_access.c


GET Request
--------------------------------
_cache_load                                     xxx_interface.c
   xxxTable_cache_load                          xxx_data_access.c
      xxxTable_allocate_rowreq_ctx              xxx_interface.c
         xxxTable_allocate_data                 xxx_data_get.c
         xxxTable_rowreq_ctx_init               xxx_data_get.c
      xxxTable_indexes_set                      xxx_data_get.c
         xxxTable_indexes_set_tbl_idx           xxx_data_get.c

xxxTable_pre_request                              

_mfd_xxxTable_object_lookup                     xxx_interface.c
   xxxTable_row_prep                            xxx_data_access.c

_mfd_xxxTable_get_values                        xxx_interface.c
   _mfd_xxxTable_get_column                     xxx_interface.c
      yyy_get                                   xxx_data_get.c

xxxTable_post_request


GETNEXT Request
--------------------------------
_cache_load                                     ...
xxxTable_pre_request                            ...
_mfd_xxxTable_object_lookup                     ...
_mfd_xxxTable_get_values                        ...
xxxTable_post_request                           ...


SET Request: success
--------------------------------
_cache_load                                     ...
xxxTable_pre_request
_mfd_xxxTable_object_lookup                     ...

_mfd_xxxTable_check_objects                     xxx_interface.c
   _xxxTable_check_column                       xxx_interface.c
      yyy_check_value                           xxx_data_set.c

_mfd_xxxTable_undo_setup                        xxx_interface.c
   xxxTable_allocate_data                       ...
   xxxTable_undo_setup                          xxx_interface.c
      _xxxTable_undo_setup_column               xxx_interface.c
         yyy_undo_setup                         xxx_data_set.c

_mfd_xxxTable_set_values                        xxx_interface.c
   _xxxTable_set_column                         xxx_interface.c
      yyy_set                                   xxx_data_set.c

_mfd_xxxTable_check_dependencies                xxx_interface.c
   xxxTable_check_dependencies                  xxx_data_set.c

_mfd_xxxTable_commit                            xxx_interface.c
   xxxTable_commit                              xxx_data_set.c

_mfd_xxxTable_undo_cleanup                      xxx_interface.c
   xxxTable_undo_cleanup                        xxx_data_set.c
      xxxTable_release_data                     ...

xxxTable_post_request                           ...


SET Request: row creation
--------------------------------
_cache_load                                     ...
xxxTable_pre_request

_mfd_xxxTable_object_lookup                     ...
   xxxTable_index_from_oid                      xxx_interface.c
   xxxTable_allocate_rowreq_ctx                 ...
      ...
   _xxxTable_check_indexes                      xxx_interface.c
      yyy_check_index                           xxx_data_set.c
      xxxTable_validate_index                   xxx_data_set.c

_mfd_xxxTable_check_objects                     ...
   _xxxTable_check_column                       ...
      yyy_check_value                           ...
   _xxxTable_check_column                       ...
      yyy_check_value                           ...

_mfd_xxxTable_undo_setup                        ...
_mfd_xxxTable_set_values                        ...
_mfd_xxxTable_check_dependencies                ...
_mfd_xxxTable_commit                            ...
_mfd_xxxTable_undo_cleanup                      ...
xxxTable_post_request                           ...


SET Resuest: value error
--------------------------------
_cache_load                                     ...
xxxTable_pre_request                            ...
_mfd_xxxTable_object_lookup                     ...

_mfd_xxxTable_check_objects                     ...
   _xxxTable_check_column                       ...
      yyy_check_value                           ...
      ERROR:"yyy value not supported"

xxxTable_post_request                           ...


SET Request: commit failure
--------------------------------
_cache_load                                     ...
xxxTable_pre_request                            ...
_mfd_xxxTable_object_lookup                     ...
_mfd_xxxTable_check_objects                     ...
_mfd_xxxTable_undo_setup                        ...
_mfd_xxxTable_set_values                        ...
_mfd_xxxTable_check_dependencies                ...

_mfd_xxxTable_commit                            ...
   xxxTable_commit                              ...
   ERROR: bad rc -1

_mfd_xxxTable_undo_commit                       xxx_interface.c
   xxxTable_undo_commit                         xxx_data_set.c

_mfd_xxxTable_undo_values                       xxx_interface.c
   _xxxTable_undo_column                        xxx_interface.c
      yyy_undo                                  xxx_data_set.c

_mfd_xxxTable_undo_cleanup                      ...
xxxTable_post_request                           ...


Row release (user initiated)
--------------------------------
xxxTable_release_rowreq_ctx                     xxx_interface.c
   xxxTable_rowreq_ctx_cleanup                  xxx_data_get.c
   xxxTable_release_data                        xxx_data_get.c



Table / column details
----------------------------------------------------
/**********************************************************************
 **********************************************************************
 ***
 *** Table profileTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * prevail-mib::profileTable is subid 8 of modEoCMib.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.36186.8.8, length: 9
*/

/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTid
 * proTid is subid 1 of profileEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.36186.8.8.1.1
 * Description:
the index of profile entry in snmp table.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   0
 *
 * Ranges:  1 - 64;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proIndex
 * proIndex is subid 2 of profileEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.36186.8.8.1.2
 * Description:
the index of profile entry in databases.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   0
 *
 * Ranges:  1 - 64;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proBase
 * proBase is subid 3 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.3
 * Description:
atheros eoc pib index.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *
 * Ranges:  1 - 32;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proMacLimit
 * proMacLimit is subid 4 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.4
 * Description:
EoC bridged hosts limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 8/16. Values:  hosts_limiting_disabled(0), one_host(1), two_hosts(2), three_hosts(3), four_hosts(4), five_hosts(5), six_hosts(6), seven_hosts(7), eight_hosts(8), null_hosts(65)
 *
 * Its syntax is HostsLimitingValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCableUplinkRate
 * proCableUplinkRate is subid 5 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.5
 * Description:
Cable uplink rate limiting in kbps.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCableDownlinkRate
 * proCableDownlinkRate is subid 6 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.6
 * Description:
Cable downlink rate limiting in kbps.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proLocalAgingTime
 * proLocalAgingTime is subid 7 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.7
 * Description:
Local bridge aging time in minutes.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proRemoteAgingTime
 * proRemoteAgingTime is subid 8 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.8
 * Description:
Remote devie bridge table aging time in minutes.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proIgmpPri
 * proIgmpPri is subid 9 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.9
 * Description:
IGMP Priority CAP value.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proUnicastPri
 * proUnicastPri is subid 10 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.10
 * Description:
Unicast Priority CAP value.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proAvsPri
 * proAvsPri is subid 11 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.11
 * Description:
AV Stream Priority CAP value.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proMcastPri
 * proMcastPri is subid 12 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.12
 * Description:
Multicast Priority CAP value.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTbaPriSts
 * proTbaPriSts is subid 13 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.13
 * Description:
TX buffer based on priority status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCosPriSts
 * proCosPriSts is subid 14 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.14
 * Description:
Map VLAN to Priority CAP.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCos0pri
 * proCos0pri is subid 15 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.15
 * Description:
VLAN priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCos1pri
 * proCos1pri is subid 16 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.16
 * Description:
VLAN priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCos2pri
 * proCos2pri is subid 17 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.17
 * Description:
VLAN priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCos3pri
 * proCos3pri is subid 18 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.18
 * Description:
VLAN priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCos4pri
 * proCos4pri is subid 19 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.19
 * Description:
VLAN priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCos5pri
 * proCos5pri is subid 20 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.20
 * Description:
VLAN priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCos6pri
 * proCos6pri is subid 21 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.21
 * Description:
VLAN priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCos7pri
 * proCos7pri is subid 22 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.22
 * Description:
VLAN priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTosPriSts
 * proTosPriSts is subid 23 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.23
 * Description:
Map TOS to Priority CAP.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTos0pri
 * proTos0pri is subid 24 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.24
 * Description:
TOS priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTos1pri
 * proTos1pri is subid 25 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.25
 * Description:
TOS priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTos2pri
 * proTos2pri is subid 26 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.26
 * Description:
TOS priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTos3pri
 * proTos3pri is subid 27 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.27
 * Description:
TOS priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTos4pri
 * proTos4pri is subid 28 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.28
 * Description:
TOS priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTos5pri
 * proTos5pri is subid 29 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.29
 * Description:
TOS priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTos6pri
 * proTos6pri is subid 30 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.30
 * Description:
TOS priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTos7pri
 * proTos7pri is subid 31 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.31
 * Description:
TOS priority mappings.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 3/8. Values:  cap0(0), cap1(1), cap2(2), cap3(3)
 *
 * Its syntax is PriQueueValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proSfbSts
 * proSfbSts is subid 32 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.32
 * Description:
Broadcast storm filter status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proSfuSts
 * proSfuSts is subid 33 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.33
 * Description:
Unknown unicast storm filter status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proSfmSts
 * proSfmSts is subid 34 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.34
 * Description:
Unknown multicast storm filter status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proSfRate
 * proSfRate is subid 35 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.35
 * Description:
Storm control rate level from 0 to 11.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 10/16. Values:  sfl_disabled(0), sfl_1kpps(1), sfl_2kpps(2), sfl_4kpps(3), sfl_8kpps(4), sfl_16kpps(5), sfl_32kpps(6), sfl_64kpps(7), sfl_128kpps(8), sfl_256kpps(9), sfl_512kpps(10), sfl_1024kpps(11)
 *
 * Its syntax is StromFilterValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proVlanStatus
 * proVlanStatus is subid 36 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.36
 * Description:
CNU vlan status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth1vid
 * proEth1vid is subid 37 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.37
 * Description:
CNU eth1 vlan id.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *
 * Ranges:  1 - 4094;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth2vid
 * proEth2vid is subid 38 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.38
 * Description:
CNU eth2 vlan id.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *
 * Ranges:  1 - 4094;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth3vid
 * proEth3vid is subid 39 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.39
 * Description:
CNU eth3 vlan id.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *
 * Ranges:  1 - 4094;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth4vid
 * proEth4vid is subid 40 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.40
 * Description:
CNU eth4 vlan id.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 1      hashint   0
 *   settable   1
 *
 * Ranges:  1 - 4094;
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proPortPriSts
 * proPortPriSts is subid 41 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.41
 * Description:
CNU port priority config status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth1pri
 * proEth1pri is subid 42 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.42
 * Description:
cnu port pri value.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth2pri
 * proEth2pri is subid 43 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.43
 * Description:
cnu port pri value.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth3pri
 * proEth3pri is subid 44 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.44
 * Description:
cnu port pri value.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth4pri
 * proEth4pri is subid 45 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.45
 * Description:
cnu port pri value.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proRxLimitSts
 * proRxLimitSts is subid 46 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.46
 * Description:
CNU port RX rate limiting status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCpuPortRxRate
 * proCpuPortRxRate is subid 47 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.47
 * Description:
CNU cpu port rx rate limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth1rx
 * proEth1rx is subid 48 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.48
 * Description:
eth1 port rx rate limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth2rx
 * proEth2rx is subid 49 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.49
 * Description:
eth2 port rx rate limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth3rx
 * proEth3rx is subid 50 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.50
 * Description:
eth3 port rx rate limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth4rx
 * proEth4rx is subid 51 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.51
 * Description:
eth4 port rx rate limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proTxLimitSts
 * proTxLimitSts is subid 52 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.52
 * Description:
CNU port TX rate limiting status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCpuPortTxRate
 * proCpuPortTxRate is subid 53 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.53
 * Description:
CNU cpu port tx rate limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth1tx
 * proEth1tx is subid 54 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.54
 * Description:
eth1 port tx rate limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth2tx
 * proEth2tx is subid 55 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.55
 * Description:
eth2 port tx rate limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth3tx
 * proEth3tx is subid 56 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.56
 * Description:
eth3 port tx rate limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth4tx
 * proEth4tx is subid 57 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.57
 * Description:
eth4 port tx rate limiting.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proPsctlSts
 * proPsctlSts is subid 58 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.58
 * Description:
CNU port link status control status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCpuPortSts
 * proCpuPortSts is subid 59 of profileEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.36186.8.8.1.59
 * Description:
CNU cpu port link status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth1sts
 * proEth1sts is subid 60 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.60
 * Description:
CNU eth1 port link status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth2sts
 * proEth2sts is subid 61 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.61
 * Description:
CNU eth2 port link status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth3sts
 * proEth3sts is subid 62 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.62
 * Description:
CNU eth3 port link status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proEth4sts
 * proEth4sts is subid 63 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.63
 * Description:
CNU eth4 port link status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proCommit
 * proCommit is subid 64 of profileEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.36186.8.8.1.64
 * Description:
Commit action node for saving current profile settings to databases.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */
/*---------------------------------------------------------------------
 * prevail-mib::profileEntry.proRowStatus
 * proRowStatus is subid 65 of profileEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.36186.8.8.1.65
 * Description:
Profile entry row status.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  1      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 * Enum range: 2/8. Values:  true(1), false(2)
 *
 * Its syntax is TruthValue (based on perltype INTEGER)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (u_long)
 */


